# SPDX-License-Identifier: AGPL-3.0-only
# SPDX-FileCopyrightText: 2023 Univention GmbH

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "common.names.fullname" . }}
  labels:
    {{- include "common.labels.standard" . | nindent 4 }}
spec:
  serviceName: {{ include "common.names.fullname" . }}
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "common.labels.matchLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        checksum/secret: {{ include (print $.Template.BasePath "/secret.yaml") . | sha256sum }}
        {{- with .Values.podAnnotations }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        {{- include "common.labels.matchLabels" . | nindent 8 }}
    spec:
      # TODO: Remove `Values.imagePullSecrets` once it has been replaced by `image.pullSecrets` everywhere.
      {{- with (coalesce .Values.image.pullSecrets .Values.imagePullSecrets) }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "common.names.fullname" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
        - name: "config-htpasswd"
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          {{ with .Values.image.configHtpasswd }}
          image: "{{ if .registry }}{{ .registry }}/{{ end }}{{ .repository }}{{ if .sha256 }}@sha256:{{ .sha256 }}{{ else }}:{{ .tag }}{{ end }}"
          imagePullPolicy: {{ .pullPolicy }}
          {{ end }}
          envFrom:
            - configMapRef:
                name: {{ include "common.names.fullname" . }}
          volumeMounts:
            - name: users
              mountPath: /app/users
            - name: htpasswd
              mountPath: /app/conf
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ if .Values.image.registry }}{{ .Values.image.registry }}/{{ end }}{{ .Values.image.repository }}{{ if .Values.image.sha256 }}@sha256:{{ .Values.image.sha256 }}{{ else }}:{{ .Values.image.tag }}{{ end }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          envFrom:
            - configMapRef:
                name: {{ include "common.names.fullname" . }}
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          volumeMounts:
            # TODO: Drop support for .Values.storeDav.authHtpasswd
            {{- if and .Values.storeDav.authHtpasswd .Values.storeDav.auth.basicAuth }}
            {{ fail "Cannot define '.Values.storeDav.authHtpasswd' and '.Values.storeDav.auth.basicAuth' at the same time." }}
            {{- end }}
            {{- if .Values.storeDav.authHtpasswd }}
            - name: deprecated-htpasswd
              mountPath: /etc/nginx/conf
            {{- else }}
            - name: htpasswd
              mountPath: /etc/nginx/conf
            {{- end }}
            - name: data
              mountPath: /data
          # TODO: enable those again
          # livenessProbe:
          #   httpGet:
          #     path: /
          #     port: http
          # readinessProbe:
          #   httpGet:
          #     path: /
          #     port: http
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      volumes:
      - name: users
        secret:
          secretName: {{ include "common.names.fullname" . | quote }}
          items:
          - key: users
            path: users.yaml
      - name: htpasswd
        emptyDir:
          sizeLimit: 1Mi
      - name: deprecated-htpasswd
        secret:
          secretName: {{ include "common.names.fullname" . | quote }}
          items:
          - key: htpasswd
            path: htpasswd
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      {{- if .Values.persistence.data.storageClass }}
      storageClassName: {{ .Values.persistence.data.storageClass | quote }}
      {{- end }}
      resources:
        requests:
          storage: {{ .Values.persistence.data.size | required ".Values.persistence.data.size is required" | quote }}
